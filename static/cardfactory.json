{
  "openapi": "3.0.1",
  "info": {
    "title": "Version 2.0",
    "description": "CardFactory Api.",
    "contact": { },
    "version": "v2.0"
  },
  "paths": {
    "/api/v2.0/card": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Create a card.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateCardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The card has been created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Gets the card.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/refabricate": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Remanufacture a card from an existing card",
        "requestBody": {
          "description": "The refabricate card dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.RefabricateCardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/stock": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Create a stock cards.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The stock of cards has been created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/stock/associate": {
      "patch": {
        "tags": [
          "Card"
        ],
        "summary": "Associate an holder to a card.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.CreateStockCardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The card has been associated to an holder.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.GetCardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/{cardExternalRef}": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Get card details.",
        "parameters": [
          {
            "name": "cardExternalRef",
            "in": "path",
            "description": "Client's card reference",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "description": "Client's card reference"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Card"
        ],
        "summary": "Updates the card.",
        "parameters": [
          {
            "name": "cardExternalRef",
            "in": "path",
            "description": "The appcardid.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The appcardid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The update card dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.UpdateCardSelfcareDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/holder/{holderExternalRef}": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Gets all cards by holder.",
        "parameters": [
          {
            "name": "holderExternalRef",
            "in": "path",
            "description": "The holder external reference.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The holder external reference.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/{cardExternalRef}/cancel": {
      "patch": {
        "tags": [
          "Card"
        ],
        "summary": "Cancels a card.",
        "parameters": [
          {
            "name": "cardExternalRef",
            "in": "path",
            "description": "The card external reference.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The card external reference.",
              "nullable": true
            }
          },
          {
            "name": "cancellationReason",
            "in": "query",
            "description": "The reason code of card cancelling.",
            "schema": {
              "$ref": "#/components/schemas/CardFactory.Domain.Card.CancellationReason"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/card/{cardExternalRef}/oppose": {
      "patch": {
        "tags": [
          "Card"
        ],
        "summary": "Opposes a card",
        "parameters": [
          {
            "name": "cardExternalRef",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Card.OppositionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardLifeCycleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardLifeCycleDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardLifeCycleDto"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardLifeCycleDto"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Card.CardLifeCycleDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/cardorder": {
      "post": {
        "tags": [
          "CardOrder"
        ],
        "summary": "Creates Card Order File",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2.0/cardorder/reject/{filename}": {
      "patch": {
        "tags": [
          "CardOrder"
        ],
        "summary": "Process Card Reject file.",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "Card reject file name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card reject file name",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/cardorder/return/{filename}": {
      "patch": {
        "tags": [
          "CardOrder"
        ],
        "summary": "Process Card Return file.",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "Card return file name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card return file name",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/cardorder/rejectbcc/{filename}": {
      "patch": {
        "tags": [
          "CardOrder"
        ],
        "summary": "Process Card BCC file.",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "description": "Card bcc file name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Card bcc file name",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.CardOrderResponse.CardOrderResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/holder/cvm": {
      "post": {
        "tags": [
          "Holder"
        ],
        "summary": "Gets holder verification method",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Holder.GetHolderVerificationMethodsResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Holder.VntsResponseDto"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardFactory.Application.Holder.VntsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2.0/offerpartner/card/{OfferPartnerCode}": {
      "get": {
        "tags": [
          "OfferPartner"
        ],
        "summary": "Gets the cards.",
        "parameters": [
          {
            "name": "partnerCode",
            "in": "path",
            "description": "The partner code.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The partner code.",
              "nullable": true
            }
          },
          {
            "name": "offerPartnerCode",
            "in": "path",
            "description": "The offer partner code.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The offer partner code.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardFactory.Application.Card.CardListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Foundation.Tool.Util.Model.ApiProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CardFactory.Application.Card.CreateCardDto": {
        "required": [
          "cardExternalRef",
          "holderExternalRef",
          "offerPartnerCode"
        ],
        "type": "object",
        "properties": {
          "offerPartnerCode": {
            "type": "string",
            "description": "[Required] Existing offer partner code"
          },
          "holderExternalRef": {
            "type": "string",
            "description": "[Required] Existing holder external ref"
          },
          "cardExternalRef": {
            "maxLength": 50,
            "type": "string",
            "description": "[Required] Client's card reference (AppCardId)"
          },
          "visualCodeSelected": {
            "maxLength": 10,
            "type": "string",
            "description": "[Optional] Selected visual code",
            "nullable": true
          },
          "label": {
            "maxLength": 50,
            "type": "string",
            "description": "[Optional] Card label",
            "nullable": true
          },
          "wishPin": {
            "type": "boolean",
            "description": "[Optional] Defines if card has wish PIN",
            "nullable": true
          },
          "isNfcActivated": {
            "type": "boolean",
            "description": "[Optional] Defines if card has Nfc activated",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create card data"
      },
      "CardFactory.Application.Card.GetCardDto": {
        "required": [
          "cardExternalRef",
          "partnerCode"
        ],
        "type": "object",
        "properties": {
          "cardExternalRef": {
            "maxLength": 50,
            "type": "string",
            "description": "Client's card reference"
          },
          "partnerCode": {
            "maxLength": 50,
            "type": "string",
            "description": "Partner code"
          }
        },
        "additionalProperties": false,
        "description": "Mandatory properties to get a unique card"
      },
      "Foundation.Tool.Util.Model.ApiProblemDetails": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "CardFactory.Application.Card.CardEventStatusDto": {
        "type": "object",
        "properties": {
          "eventStatusCode": {
            "type": "string",
            "description": "Card event status code value.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of card event status.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "State of this event status",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "CardEventStatus representation"
      },
      "CardFactory.Application.Card.CardStatusDto": {
        "type": "object",
        "properties": {
          "cardStatusCode": {
            "type": "string",
            "description": "Card status code value.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description card status value.",
            "nullable": true
          },
          "eventStatus": {
            "$ref": "#/components/schemas/CardFactory.Application.Card.CardEventStatusDto"
          }
        },
        "additionalProperties": false,
        "description": "CardStatus representation"
      },
      "CardFactory.Application.Card.CardListDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Card label",
            "nullable": true
          },
          "isAlphaTest": {
            "type": "boolean",
            "description": "Defines if card is in alpha test"
          },
          "cardExternalRef": {
            "type": "string",
            "description": "Client's card reference (AppCardId)",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CardFactory.Application.Card.CardStatusDto"
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date.",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiration date.",
            "nullable": true
          },
          "visualCodeSelected": {
            "type": "string",
            "description": "Visual code selected.",
            "nullable": true
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Is card blocked"
          },
          "globalLimitAtmSelected": {
            "type": "integer",
            "description": "Global Atm limit\r\nMust not exceed the offer partner value\r\nIf not set, the default limit specified in the offer will be used",
            "format": "int32",
            "nullable": true
          },
          "globalLimitPaymentSelected": {
            "type": "integer",
            "description": "Global Payment limit\r\nMust not exceed the offer partner value\r\nIf not set, the default limit specified in the offer will be used",
            "format": "int32",
            "nullable": true
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique Id.",
            "nullable": true
          },
          "bankId": {
            "type": "integer",
            "description": "Bank Id value.",
            "format": "int32"
          },
          "hint": {
            "type": "string",
            "description": "The pan hint value of the card.",
            "nullable": true
          },
          "partnerCode": {
            "type": "string",
            "description": "Gets or sets the partner code.",
            "nullable": true
          },
          "offerPartnerCode": {
            "type": "string",
            "description": "Gets or sets the offer partner code.",
            "nullable": true
          },
          "wishPin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [wish pin]."
          },
          "oldExternalRef": {
            "type": "string",
            "description": "Gets or sets the old external reference.",
            "nullable": true
          },
          "isVadBlocked": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is vad blocked."
          },
          "isGeoBlocked": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is geo blocked."
          },
          "holderExternalRef": {
            "type": "string",
            "description": "Gets or sets the holder external reference.",
            "nullable": true
          },
          "oppositionReasonCode": {
            "type": "string",
            "description": "Opposition reason code.",
            "nullable": true
          },
          "cancellationReasonCode": {
            "type": "string",
            "description": "Cancellation reason code.",
            "nullable": true
          },
          "isNfcActivated": {
            "type": "boolean",
            "description": "Is Nfc activated.",
            "nullable": true
          },
          "isPaymentAllowed": {
            "type": "boolean",
            "description": "Is Payment allowed.",
            "nullable": true
          },
          "isAtmWithdrawalAllowed": {
            "type": "boolean",
            "description": "Is Atm Withdrawal allowed.",
            "nullable": true
          },
          "isQuasiCashAllowed": {
            "type": "boolean",
            "description": "Is Quasi cash allowed.",
            "nullable": true
          },
          "isWithdrawalAtTheCounterAllowed": {
            "type": "boolean",
            "description": "Is Withdrawal at the counter allowed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used when getting a collection of cards"
      },
      "CardFactory.Application.Card.RefabricateCardDto": {
        "required": [
          "cardExternalRef",
          "oldCardExternalRef"
        ],
        "type": "object",
        "properties": {
          "cardExternalRef": {
            "type": "string",
            "description": "[Required] New client's card reference (AppCardId)"
          },
          "oldCardExternalRef": {
            "type": "string",
            "description": "[Required] Existing old client's card reference (AppCardId)"
          },
          "visualCodeSelected": {
            "maxLength": 10,
            "type": "string",
            "description": "[Optional] Selected visual code",
            "nullable": true
          },
          "label": {
            "maxLength": 50,
            "type": "string",
            "description": "[Optional] Card label",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Refabricate a card from an existing card"
      },
      "CardFactory.Application.Card.CreateStockDto": {
        "required": [
          "cardsQuantity",
          "offerPartnerCode"
        ],
        "type": "object",
        "properties": {
          "offerPartnerCode": {
            "type": "string",
            "description": "[Required] Existing offer partner code."
          },
          "cardsQuantity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "[Required] Quantity of cards to create.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data of creation of a new stock of virtual cards"
      },
      "CardFactory.Application.Card.CreateStockCardDto": {
        "required": [
          "cardExternalRef",
          "holderExternalRef",
          "offerPartnerCode"
        ],
        "type": "object",
        "properties": {
          "offerPartnerCode": {
            "type": "string",
            "description": "[Required] Existing offer partner code"
          },
          "holderExternalRef": {
            "type": "string",
            "description": "[Required] Existing holder external reference"
          },
          "cardExternalRef": {
            "maxLength": 50,
            "type": "string",
            "description": "[Required] Client's card reference (AppCardId)"
          },
          "label": {
            "type": "string",
            "description": "[Optional] Card label",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create stock card data"
      },
      "CardFactory.Application.Holder.HolderDto": {
        "type": "object",
        "properties": {
          "holderExternalRef": {
            "type": "string",
            "description": "Holder code",
            "nullable": true
          },
          "partnerCode": {
            "type": "string",
            "description": "Gets or sets the partner code.",
            "nullable": true
          },
          "holderFirstName": {
            "type": "string",
            "description": "Holder first name",
            "nullable": true
          },
          "holderLastName": {
            "type": "string",
            "description": "Holder last name",
            "nullable": true
          },
          "holderEmail": {
            "type": "string",
            "description": "Holder email",
            "nullable": true
          },
          "holderPhoneNumber": {
            "type": "string",
            "description": "Holder phone number",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holder representation"
      },
      "CardFactory.Application.OfferPartner.OfferPartnerDto": {
        "type": "object",
        "properties": {
          "offerPartnerCode": {
            "type": "string",
            "description": "Offer partner code",
            "nullable": true
          },
          "partnerCode": {
            "type": "string",
            "description": "Partner code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "OfferPartner representation"
      },
      "CardFactory.Application.Card.CardDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Card label",
            "nullable": true
          },
          "isAlphaTest": {
            "type": "boolean",
            "description": "Defines if card is in alpha test"
          },
          "cardExternalRef": {
            "type": "string",
            "description": "Client's card reference (AppCardId)",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CardFactory.Application.Card.CardStatusDto"
          },
          "oppositionReasonCode": {
            "type": "string",
            "description": "Opposition reason code.",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date.",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiration date.",
            "nullable": true
          },
          "visualCodeSelected": {
            "type": "string",
            "description": "Visual code selected.",
            "nullable": true
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Is card blocked"
          },
          "globalLimitAtmSelected": {
            "type": "integer",
            "description": "Global Atm limit\r\nMust not exceed the offer partner value\r\nIf not set, the default limit specified in the offer will be used",
            "format": "int32",
            "nullable": true
          },
          "globalLimitPaymentSelected": {
            "type": "integer",
            "description": "Global Payment limit\r\nMust not exceed the offer partner value\r\nIf not set, the default limit specified in the offer will be used",
            "format": "int32",
            "nullable": true
          },
          "holder": {
            "$ref": "#/components/schemas/CardFactory.Application.Holder.HolderDto"
          },
          "offerPartner": {
            "$ref": "#/components/schemas/CardFactory.Application.OfferPartner.OfferPartnerDto"
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique Id.",
            "nullable": true
          },
          "bankId": {
            "type": "integer",
            "description": "Bank Id value.",
            "format": "int32"
          },
          "hint": {
            "type": "string",
            "description": "The pan hint value of the card.",
            "nullable": true
          },
          "isGeoblocked": {
            "type": "boolean",
            "description": "Is Geo blocked.",
            "nullable": true
          },
          "isVadBlocked": {
            "type": "boolean",
            "description": "Is Vad Blocked."
          },
          "wishPin": {
            "type": "boolean",
            "description": "Use random Pin."
          },
          "oldExternalRef": {
            "type": "string",
            "description": "Gets or sets the old Card external reference.",
            "nullable": true
          },
          "cancellationReasonCode": {
            "type": "string",
            "description": "Cancellation reason code.",
            "nullable": true
          },
          "isNfcActivated": {
            "type": "boolean",
            "description": "Is Nfc activated.",
            "nullable": true
          },
          "isPaymentAllowed": {
            "type": "boolean",
            "description": "Is Payment allowed.",
            "nullable": true
          },
          "isAtmWithdrawalAllowed": {
            "type": "boolean",
            "description": "Is Atm Withdrawal allowed.",
            "nullable": true
          },
          "isQuasiCashAllowed": {
            "type": "boolean",
            "description": "Is Quasi cash allowed.",
            "nullable": true
          },
          "isWithdrawalAtTheCounterAllowed": {
            "type": "boolean",
            "description": "Is Withdrawal at the counter allowed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Card representation"
      },
      "CardFactory.Application.Card.UpdateCardSelfcareDto": {
        "type": "object",
        "properties": {
          "globalLimitAtmSelected": {
            "type": "integer",
            "description": "Gets or sets the global limit atm selected",
            "format": "int32",
            "nullable": true
          },
          "globalLimitPaymentSelected": {
            "type": "integer",
            "description": "Gets or sets the global limit payment selected",
            "format": "int32",
            "nullable": true
          },
          "cardBlocked": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the card is blocked",
            "nullable": true
          },
          "isVadBlocked": {
            "type": "boolean",
            "description": "Gets or sets the value indicating if VAD payments are blocked.",
            "nullable": true
          },
          "foreignPaymentBlocked": {
            "type": "boolean",
            "description": "Gets or sets the block/ unblock foreign card transactions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "UpdateCardDto"
      },
      "CardFactory.Domain.Card.CancellationReason": {
        "enum": [
          1,
          2,
          3,
          4,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "CardFactory.Domain.Card.OppositionReason": {
        "enum": [
          7,
          34,
          41,
          43,
          51
        ],
        "type": "integer",
        "format": "int32"
      },
      "CardFactory.Domain.Card.ChannelCode": {
        "enum": [
          4,
          66,
          72
        ],
        "type": "integer",
        "format": "int32"
      },
      "CardFactory.Application.Card.OppositionDto": {
        "required": [
          "channelCode",
          "oppositionReasonCode"
        ],
        "type": "object",
        "properties": {
          "oppositionReasonCode": {
            "$ref": "#/components/schemas/CardFactory.Domain.Card.OppositionReason"
          },
          "channelCode": {
            "$ref": "#/components/schemas/CardFactory.Domain.Card.ChannelCode"
          },
          "oppositionDeclarationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Opposition Dto"
      },
      "CardFactory.Application.Card.CardLifeCycleDto": {
        "type": "object",
        "properties": {
          "cardExternalRef": {
            "type": "string",
            "description": "Client's card reference (AppCardId)",
            "nullable": true
          },
          "cardStatusCode": {
            "type": "string",
            "description": "Card status",
            "nullable": true
          },
          "cardEventCode": {
            "type": "string",
            "description": "Opposition event.\r\nDefines the current state of the card request.",
            "nullable": true
          },
          "cardEventStatusCode": {
            "type": "string",
            "description": "Card event status.\r\nDefines the current state of the card request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Life cycle card response"
      },
      "CardFactory.Application.CardOrderResponse.CardOrderResponseDto": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Card filename processed.",
            "nullable": true
          },
          "processStatus": {
            "type": "boolean",
            "description": "Card result process status value."
          }
        },
        "additionalProperties": false,
        "description": "CardOrderResponseDto representation."
      },
      "CardFactory.Application.Holder.DeviceInformationDto": {
        "type": "object",
        "properties": {
          "secureElementID": {
            "type": "string",
            "nullable": true
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "deviceNumber": {
            "type": "string",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.RiskInformationDto": {
        "type": "object",
        "properties": {
          "wpReasonCodes": {
            "type": "string",
            "description": "From 0100 f125 (Supporting Information), dsi02 (Wallet Provider), tag07 (Wallet provider reason codes). \r\nUp to 15 2-byte hex reason codes from 01 to 0E.\t(Exception: Apple Pay Orange Condition reason code will be ‘0G’, not a hex value.)",
            "nullable": true
          },
          "panSource": {
            "type": "string",
            "description": "From 0100 f125 (Supporting Information), dsi02 (Wallet Provider), tag08 (Pan Source).  2-byte hex value from 01 to 03.",
            "nullable": true
          },
          "wpDeviceScore": {
            "type": "integer",
            "description": "From 0100 f125 (Supporting Information), dsi02 (Wallet Provider), tag05 (Wallet Provider Device Score).  Value from 1 to 5 (most trusted).",
            "format": "int64"
          },
          "wpAccountScore": {
            "type": "integer",
            "description": "From 0100 f125 (Supporting Information), dsi02 (Wallet Provider), tag06 (Wallet Provider Account Score).  Value from 1 to 5 (most trusted).",
            "format": "int64"
          },
          "riskAssessmentScore": {
            "type": "integer",
            "description": "From 0100 f62.21 (Online Risk Assessment Risk Score and Reason Codes) positions 1, 2 (Risk Score).  Value from 01 – 99.",
            "format": "int64"
          },
          "tokenProvisioningScore": {
            "type": "integer",
            "description": "From 0100 f123 (Verification Data), dsi68 (Token Data), tag10 (Visa Token Score).  Value from 01 – 99.",
            "format": "int64"
          },
          "issuerSpecialConditionCodes": {
            "type": "string",
            "description": "Issuer Special Condition Codes",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.WalletProviderMessageTracingDto": {
        "type": "object",
        "properties": {
          "tokenRequestorID": {
            "type": "integer",
            "format": "int64"
          },
          "wpRequestID": {
            "type": "string",
            "nullable": true
          },
          "wpConversationID": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.HolderInformationDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "encryptionKeyIndex": {
            "type": "string",
            "nullable": true
          },
          "encryptedDataBlob": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.GetHolderVerificationMethodsRequestDto": {
        "type": "object",
        "properties": {
          "walletAccountID": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "description": "Token Value for PAN",
            "nullable": true
          },
          "otpReason": {
            "type": "string",
            "description": "Reason for Getting OTP resolution Methods",
            "nullable": true
          },
          "otpMaxReached": {
            "type": "string",
            "description": "This field describes whether the Token has exceeded the number OTP requests and so is no longer a supported method for that token",
            "nullable": true
          },
          "deviceInfo": {
            "$ref": "#/components/schemas/CardFactory.Application.Holder.DeviceInformationDto"
          },
          "riskInformation": {
            "$ref": "#/components/schemas/CardFactory.Application.Holder.RiskInformationDto"
          },
          "tokenReferenceID": {
            "type": "string",
            "nullable": true
          },
          "panReferenceID": {
            "type": "string",
            "nullable": true
          },
          "walletProviderMessageTracing": {
            "$ref": "#/components/schemas/CardFactory.Application.Holder.WalletProviderMessageTracingDto"
          },
          "lifeCycleTraceID": {
            "type": "string",
            "nullable": true
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/CardFactory.Application.Holder.HolderInformationDto"
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.CardholderVerificationMethodDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Verification Method Type",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Verification Method value,Could be masked value, depends on type.\r\nFor Example: ip**** @gmail.com",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique and opaque identifier for this method.",
            "nullable": true
          },
          "sourceAddress": {
            "type": "string",
            "nullable": true
          },
          "otpMethodPlatform": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFactory.Application.Holder.GetHolderVerificationMethodsResponseDto": {
        "type": "object",
        "properties": {
          "cardholderVerificationMethod": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardFactory.Application.Holder.CardholderVerificationMethodDto"
            },
            "nullable": true
          },
          "actionCode": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "response verification methods for card holder"
      },
      "CardFactory.Application.Holder.VntsResponseDto": {
        "type": "object",
        "properties": {
          "actionCode": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer token authorization": {
        "type": "http",
        "description": "Authentication with bearer token",
        "scheme": "bearer"
      },
      "Sts authentication": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://connect.xpollens.com//connect/token",
            "scopes": {
              "partner": "",
              "internal_settings": "",
              "thirdparty_kyc": ""
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Bearer token authorization": [ ]
    },
    {
      "Sts authentication": [ ]
    }
  ]
}